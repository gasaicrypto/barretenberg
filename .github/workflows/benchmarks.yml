name: Barretenberg Benchmarks

# Ограничиваем запуск workflow только для pull-запросов в основную ветку
on:
  pull_request:
    branches:
      - main  # Проверяем только pull-запросы в основную ветку

# Это отменит все запущенные процессы, если был новый push в той же ветке
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref || github.run_id }}
  cancel-in-progress: true

jobs:
  bberg-bench:
    name: Barretenberg Benchmarks
    runs-on: ubuntu-latest

    # Кэшируем зависимости для ускорения работы
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}  # Скачиваем код для текущего pull-запроса
          token: ${{ secrets.GITHUB_TOKEN }}

      # Кэшируем APT зависимости (например, cmake и другие пакеты)
      - name: Cache APT packages
        uses: actions/cache@v3
        with:
          path: /tmp/apt-cache
          key: ${{ runner.os }}-apt-${{ hashFiles('**/CMakeLists.txt') }}
          restore-keys: |
            ${{ runner.os }}-apt-

      # Кэшируем директорию сборки (если сборка не изменилась)
      - name: Cache cmake build
        uses: actions/cache@v3
        with:
          path: cpp/build-bench
          key: ${{ runner.os }}-cmake-${{ hashFiles('cpp/CMakeLists.txt') }}
          restore-keys: |
            ${{ runner.os }}-cmake-

      # Настроим среду с необходимыми зависимостями
      - name: Setup Linux environment
        run: |
          sudo apt update
          sudo apt install -y libomp-dev cmake ninja-build

      # Скачиваем SRS элементы, если они ещё не скачаны
      - name: Download SRS elements
        working-directory: cpp/srs_db
        run: ./download_ignition.sh 3  # Скачиваем только нужные файлы

      # Строим бенчмарки
      - name: Build Honk benchmarks
        working-directory: cpp
        run: |
          cmake --preset bench
          cmake --build --preset bench --target ultra_honk_bench

      # Запускаем бенчмарки и сохраняем результаты
      - name: Run Honk benchmarks
        working-directory: cpp/build-bench
        run: |
          bin/ultra_honk_bench --benchmark_format=json > ../src/barretenberg/benchmark/ultra_bench/bench_results.json

      # Используем GitHub Action для автоматического обновления данных о бенчмарках
      - name: Store benchmark result
        uses: benchmark-action/github-action-benchmark@v1
        with:
          name: C++ Benchmark
          tool: 'googlecpp'
          output-file-path: cpp/src/barretenberg/benchmark/ultra_bench/bench_results.json
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: true
          summary-always: true
          alert-threshold: '120%'  # Тестируем на ухудшение производительности
          comment-on-alert: true  # Оставляем комментарии в случае регрессии
          fail-on-alert: false  # Не останавливаем сборку в случае регрессии
          alert-comment-cc-users: '@ledwards2225'  # Отправляем уведомление

      # Опционально: добавляем деплой на GitHub Pages для удобного просмотра результатов
      - name: Deploy benchmark results to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        if: success() && github.ref == 'refs/heads/main'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs/benchmark_results  # Публикуем результаты на GitHub Pages

  # Дополнительно: добавим шаг для уведомлений или рецензирования
  notify:
    runs-on: ubuntu-latest
    needs: bberg-bench
    steps:
      - name: Send notification to Slack
        if: failure()  # Уведомление в случае ошибки
        run: |
          curl -X POST -H 'Content-type: application/json' \
          --data '{"text":"Benchmark job failed! Check the results."}' \
          ${{ secrets.SLACK_WEBHOOK_URL }}
